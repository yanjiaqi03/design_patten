"装饰者模式" 核心思想：
1. 增加属性，不需要更改底层类
2. 主要采用继承、组合方式
3. 装饰可以累加，最终能够得出所有装饰后的结果
4. 装饰无顺序

场景：
当需要给一个物体属性叠加的时候使用，它们需要继承同一抽象类，
使用抽象类引用创建不同的子类实例，创建实例时将上一个实例传入。

举例：
装修总价的案例：

装修的每个部分价格不一样，每种样式的价格也不一样，
经过一系列的装修，得出最终价格。

主体： 接口 & 具体主体类
装饰： 抽象类继承主体接口， 构造形参为主体接口
